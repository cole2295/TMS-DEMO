@model Enum
@{
    // Looks for a [Display(Name="Some Name")] Attribute on your enum
    Func<Enum, string> getDescription = en =>
    {
        Type type = en.GetType();
        System.Reflection.MemberInfo[] memInfo = type.GetMember(en.ToString());

        if (memInfo != null && memInfo.Length > 0)
        {
            object[] attrs = memInfo[0].GetCustomAttributes(
                typeof(System.ComponentModel.DescriptionAttribute), false);

            if (attrs != null && attrs.Length > 0)
                return ((System.ComponentModel.DescriptionAttribute)attrs[0]).Description;
        }
        return en.ToString();
    };


    var listItems = Enum.GetValues(Model.GetType())
        .OfType<Enum>().Select(elem =>
        {
            var m = (int)Enum.Parse(Model.GetType(), Model.ToString());
            var e = (int)Enum.Parse(Model.GetType(), elem.ToString());

            return new SelectListItem()
            {
                Text = getDescription(elem),
                Value = e.ToString(),
                Selected = ((e & m) == e)
            };
        }
        );

    string oldPrefix = ViewData.TemplateInfo.HtmlFieldPrefix;
    string prefix = oldPrefix;
    if(string.IsNullOrWhiteSpace(prefix)){
        prefix = Model.GetType().Name;
    }
    int index = 0;
    ViewData.TemplateInfo.HtmlFieldPrefix = string.Empty;

    foreach (var li in listItems)
    {
        string fieldName = string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}_{1}", prefix, index++);
        <input@(li.Selected ? " checked" : " ") id="@fieldName" name="@prefix" type="checkbox" value="@li.Value" />@Html.Label(fieldName, li.Text)@:&nbsp;
    }
    ViewData.TemplateInfo.HtmlFieldPrefix = oldPrefix;
}
