using System.Linq;
using Vancl.TMS.DAL.Oracle.Sorting.Outbound;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using Vancl.TMS.Model.Sorting.Outbound;
using Vancl.TMS.Model.Common;

namespace TMSUnitTestPrj
{
    
    
    /// <summary>
    ///This is a test class for OutboundDALTest and is intended
    ///to contain all OutboundDALTest Unit Tests
    ///</summary>
    [TestClass()]
    public class OutboundDALTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetOutboundEntityByBatchNoList
        ///</summary>
        [TestMethod()]
        public void GetOutboundEntityByBatchNoListTest()
        {
            OutboundDAL target = new OutboundDAL(); // TODO: Initialize to an appropriate value
            IList<string> batchNoList = new List<string>(); // TODO: Initialize to an appropriate value
            batchNoList.Add("20121030100002");
            batchNoList.Add("20121031100001");
            IList<OutboundEntityModel> expected = null; // TODO: Initialize to an appropriate value
            IList<OutboundEntityModel> actual;
            actual = target.GetOutboundEntityByBatchNoList(batchNoList);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetOrderCount
        ///</summary>
        [TestMethod()]
        public void GetOrderCountTest()
        {
            OutboundDAL target = new OutboundDAL(); // TODO: Initialize to an appropriate value
            IList<string> batchNoList = new List<string>(); ; // TODO: Initialize to an appropriate value
            batchNoList.Add("20121030100002");
            batchNoList.Add("20121031100001");
            IList<OutboundOrderCountModel> expected = null; // TODO: Initialize to an appropriate value
            IList<OutboundOrderCountModel> actual;
            actual = target.GetOrderCount(batchNoList);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetOutboundPrintExportModel
        ///</summary>
        [TestMethod()]
        public void GetOutboundPrintExportModelTest()
        {
            OutboundDAL target = new OutboundDAL(); // TODO: Initialize to an appropriate value
            string batchNos = @"

";
            var list = batchNos.Split(',').Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
            IList<string> batchNoList = list; // TODO: Initialize to an appropriate value
            IList<OutboundPrintExportModel> expected = null; // TODO: Initialize to an appropriate value
            IList<OutboundPrintExportModel> actual;
            actual = target.GetOutboundPrintExportModel(batchNoList);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetBatchBillInfoForOutBoundSendMail
        ///</summary>
        [TestMethod()]
        public void GetBatchBillInfoForOutBoundSendMailTest()
        {
            OutboundDAL target = new OutboundDAL(); // TODO: Initialize to an appropriate value
            IList<string> formCodeList = new List<string>(); // TODO: Initialize to an appropriate value
            formCodeList.Add("1321111200");
            formCodeList.Add("132111132");
            Enums.SortCenterOperateType outboundType = new Enums.SortCenterOperateType(); // TODO: Initialize to an appropriate value
            IList<BatchBillInfoForOutBound> expected = null; // TODO: Initialize to an appropriate value
            IList<BatchBillInfoForOutBound> actual;
            actual = target.GetBatchBillInfoForOutBoundSendMail(formCodeList, outboundType);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }
}
